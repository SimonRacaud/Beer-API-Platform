security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        users: 
            entity:
                class: 'App\Entity\User'
                property: 'pseudo'
    encoders:
        App\Entity\User:
            algorithm: auto
            cost: 16 
        App\Entity\User2:
            algorithm: auto

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        api:
            pattern: ^/api/
            stateless: true
            methods: [PUT, PATCH, DELETE]
            #anonymous: true
            provider: users
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator
        main:
            anonymous: true
            json_login:
                check_path: /login
                username_path: pseudo
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/docs, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/users, roles: IS_AUTHENTICATED_FULLY, methods: [PUT, PATCH, DELETE] }
        - { path: ^/api/checkins, roles: IS_AUTHENTICATED_FULLY, methods: [PUT, PATCH, DELETE] }
        - { path: ^/api/brasseries, roles: IS_AUTHENTICATED_FULLY, methods: [PUT, PATCH, DELETE] }
        - { path: ^/api/beers, roles: IS_AUTHENTICATED_FULLY, methods: [PUT, PATCH, DELETE] }
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
    
    #encoders:

